// ================================================================
// IngestedChunk Entity - Text Chunk with Vector Embeddings
// ================================================================
// This class represents a processed text chunk from a document that has been
// ingested into the RAG system. Each chunk contains the original text content
// along with its vector embedding for semantic search capabilities.
//
// Key Features:
// - Stores text chunks with automatic vector embedding generation
// - Enables semantic similarity search through vector operations
// - Maintains references to source document and page information
// - Optimized for Azure OpenAI text-embedding-3-small model (1536 dimensions)
// ================================================================

using Microsoft.Extensions.VectorData;

namespace AiMlClarityDemoTerminal.Entities;

/// <summary>
/// Represents a text chunk extracted from a document with its associated vector embedding.
/// This entity is used for semantic search and retrieval in the RAG system.
/// Each chunk typically contains 200 tokens of text and is stored with a 1536-dimensional
/// vector embedding generated by Azure OpenAI's text-embedding-3-small model.
/// </summary>
public sealed class IngestedChunk
{
    // ================================================================
    // Vector Configuration Constants
    // ================================================================
    
    /// <summary>
    /// Vector dimensions for Azure OpenAI text-embedding-3-small model.
    /// This model produces 1536-dimensional embeddings that capture semantic meaning.
    /// </summary>
    private const int VectorDimensions = 1536;
    
    /// <summary>
    /// Distance function used for vector similarity calculations.
    /// Cosine distance is optimal for normalized embeddings from OpenAI models
    /// as it measures the angle between vectors regardless of magnitude.
    /// </summary>
    private const string VectorDistanceFunction = DistanceFunction.CosineDistance;

    // ================================================================
    // Entity Properties
    // ================================================================

    /// <summary>
    /// Unique identifier for this text chunk in the vector database.
    /// Generated using Guid.CreateVersion7() for time-ordered uniqueness
    /// and better database performance.
    /// </summary>
    [VectorStoreKey]
    public required string Key { get; set; }

    /// <summary>
    /// Identifier of the source document from which this chunk was extracted.
    /// Used for filtering search results by document and providing citations.
    /// This corresponds to the filename of the original PDF document.
    /// </summary>
    [VectorStoreData(IsIndexed = true)]
    public required string DocumentId { get; set; }

    /// <summary>
    /// Page number within the source document where this text chunk was found.
    /// Used for providing precise citations and allowing users to locate
    /// the original content in the source document.
    /// </summary>
    [VectorStoreData]
    public int PageNumber { get; set; }

    /// <summary>
    /// The actual text content of this chunk.
    /// This is the raw text extracted from the PDF and processed into
    /// semantically meaningful segments of approximately 200 tokens.
    /// This text is used both for display to users and for generating embeddings.
    /// </summary>
    [VectorStoreData]
    public required string Text { get; set; }

    /// <summary>
    /// Vector embedding representation of the text content.
    /// This property automatically uses the Text property to generate embeddings
    /// through the vector store's embedding generator. The resulting 1536-dimensional
    /// vector captures the semantic meaning of the text and enables similarity search.
    /// 
    /// The vector is generated automatically when the chunk is stored in the database
    /// using Azure OpenAI's text-embedding-3-small model.
    /// </summary>
    [VectorStoreVector(VectorDimensions, DistanceFunction = VectorDistanceFunction)]
    public string? Vector => Text;
}
